
(* 5.6 Example: Associativity of Multiplication

   Dafny uses nat. Here we use type "int" with extra preconditions.
*)

use int.Int

let rec function mult (x y: int) : int
  requires { y >= 0 }
  variant  { y }
= if y = 0 then 0 else x + mult x (y - 1)

let rec lemma mult_commutative (x y: int)
  requires { x >= 0 }
  requires { y >= 0 }
  variant  { x, y }
  ensures  { mult x y = mult y x }
= if x = y then
    ()
  else if x = 0 then
    mult_commutative x (y-1)
  else if y < x then
    mult_commutative y x
  else begin
    mult_commutative x (y-1);
    mult_commutative (x-1) (y-1);
    mult_commutative (x-1) y
  end
