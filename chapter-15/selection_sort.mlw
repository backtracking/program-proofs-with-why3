
(* 15.1 Selection Sort *)

use int.Int
use ref.Refint
use array.Array
use array.ArraySwap
use array.ArrayPermut

predicate split_point (a: array int) (n: int) =
  forall i j. 0 <= i < n <= j < length a -> a[i] <= a[j]

let selection_sort (a: array int) : unit
  ensures { forall i, j. 0 <= i < j < length a -> a[i] <= a[j] }
  ensures { permut a (old a) 0 (length a) }
= for n = 0 to length a - 1 do
    invariant { forall i, j. 0 <= i < j < n -> a[i] <= a[j] }
    invariant { split_point a n }
    invariant { permut a (old a) 0 (length a) }
    let ref mindex = n in
    for m = n + 1 to length a - 1 do
      invariant { n <= mindex < m }
      invariant { forall i. n <= i < m -> a[mindex] <= a[i] }
      if a[m] < a[mindex] then mindex := m;
    done;
    swap a n mindex
  done
